name: iaito CI

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  acr-linux-r2git:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true # 'recursive' 'true' or 'false'
        persist-credentials: false
    - uses: actions/setup-python@v1
      with:
        python-version: 3.7.x
    - name: apt dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libgraphviz-dev mesa-common-dev ninja-build
        sudo apt-get install qt5-default libqt5svg5-dev qttools5-dev qttools5-dev-tools
    - name: install r2
      run: |
        git clone --depth=1 https://github.com/radareorg/radare2 r2git
        cd r2git && sys/install.sh
    - name: build iaito
      run: |
        ./configure --prefix=/usr
        make -j4
    - name: packaging
      run: |
        make -C dist/debian
    - uses: actions/upload-artifact@v2
      with:
        name: iaito-amd64.deb
        path: dist/debian/*/*.deb
  acr-linux:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true # 'recursive' 'true' or 'false'
        persist-credentials: false
    - uses: actions/setup-python@v1
      with:
        python-version: 3.7.x
    - name: apt dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libgraphviz-dev mesa-common-dev ninja-build
        sudo apt-get install qt5-default libqt5svg5-dev qttools5-dev qttools5-dev-tools
    - name: install r2
      run: |
        wget -q https://github.com/radareorg/radare2/releases/download/5.3.1/radare2_5.3.1_amd64.deb
        wget -q https://github.com/radareorg/radare2/releases/download/5.3.1/radare2-dev_5.3.1_amd64.deb
        sudo dpkg -i *.deb
    - name: build iaito
      run: |
        ./configure --prefix=/usr
        make -j4
    - name: packaging
      run: |
        make -C dist/debian
    - uses: actions/upload-artifact@v2
      with:
        name: iaito-amd64.deb
        path: dist/debian/*/*.deb
  acr-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true # 'recursive' 'true' or 'false'
        persist-credentials: false
    - uses: actions/setup-python@v1
      with:
        python-version: 3.7.x
    - name: homebrew dependencies
      run: |
        brew update
        brew install coreutils pkg-config qt5
        brew link qt5 --force
        pip3 install meson
    - name: install r2
      run: |
        wget -q https://github.com/radareorg/radare2/releases/download/5.3.1/radare2-5.3.1.pkg
        sudo installer -pkg *.pkg -target /
    - name: build iaito
      run: |
        # export PATH="/usr/local/opt/qt/bin:$PATH" # doesnt seems to be necessary
        ./configure
        make -j4
    - name: packaging
      run: |
        make -C dist/macos
    - uses: actions/upload-artifact@v2
      with:
        name: iaito-mac.pkg
        path: dist/macos/macos-pkg/iaito*.pkg
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-18.04, macos-latest, windows-latest]
        python-version: [3.7.x]
        system-deps: [false]
        cc-override: [default]
        cxx-override: [default]
      # Prevent one job from pausing the rest
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true # 'recursive' 'true' or 'false'
        persist-credentials: false
    - name: apt dependencies
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get install libgraphviz-dev mesa-common-dev
        sudo apt-get install ninja-build
        if [[ "${{ matrix.system-deps }}" = "true" ]]
        then
          sudo apt-get install qt5-default libqt5svg5-dev qttools5-dev qttools5-dev-tools
        fi
    - uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: homebrew dependencies
      if: contains(matrix.os, 'macos')
      run: |
        cd scripts
        rm '/usr/local/bin/2to3' # symlink to some kind of existing python2.7 installation conflicts with brew python3 which gets installed as indirect dependency
        brew update --preinstall # temporary workaround for https://github.com/Homebrew/homebrew-bundle/issues/751
        brew bundle
        brew install coreutils
        brew install pkg-config
    - name: py dependencies
      run: |
        pip install meson
    - uses: actions/upload-artifact@v2
      if: contains(matrix.os, 'ubuntu')
      with:
        name: iaito_amd64.deb
        path: dist/debian/*/*.deb
    - name: cmake ubuntu
      if: contains(matrix.os, 'ubuntu')
      run: |
        if [[ "${{ matrix.system-deps }}" = "false" ]]
        then
          scripts/fetch_deps.sh
          source cutter-deps/env.sh
          export PKG_CONFIG_PATH="$CUTTER_DEPS_PYTHON_PREFIX/lib/pkgconfig:${PKG_CONFIG_PATH:-}"
          export LD_LIBRARY_PATH="`llvm-config --libdir`:$LD_LIBRARY_PATH"
        fi
        set -euo pipefail #TODO: move to top once cutter-deps doesn't fail
        if [[ "${{ matrix.cc-override }}" != "default" ]]
        then
          export CC="${{matrix.cc-override}}"
          export CXX="${{matrix.cxx-override}}"
        fi

        source scripts/prepare_breakpad_linux.sh
        export PKG_CONFIG_PATH="$CUSTOM_BREAKPAD_PREFIX/lib/pkgconfig:${PKG_CONFIG_PATH:-}" #
        mkdir build
        cd build
        cmake --version
        if [[ "${{ matrix.system-deps }}" = "false" ]]
        then
          cmake \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DIAITO_ENABLE_PYTHON=ON \
            -DPYTHON_LIBRARY="$CUTTER_DEPS_PYTHON_PREFIX/lib/libpython3.6m.so.1.0" \
            -DPYTHON_INCLUDE_DIR="$CUTTER_DEPS_PYTHON_PREFIX/include/python3.6m" \
            -DPYTHON_EXECUTABLE="$CUTTER_DEPS_PYTHON_PREFIX/bin/python3" \
            -DIAITO_ENABLE_PYTHON_BINDINGS=OFF \
            -DIAITO_ENABLE_CRASH_REPORTS=ON \
            -DIAITO_USE_BUNDLED_RADARE2=ON \
            ../src
        else
          cmake \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DIAITO_USE_BUNDLED_RADARE2=ON \
            ../src
        fi
        ninja
    - name: cmake macos
      shell: bash
      if: contains(matrix.os, 'macos')
      run: |
        scripts/fetch_deps.sh
        source cutter-deps/env.sh
        set -euo pipefail
        wget -q https://github.com/radareorg/radare2/releases/download/5.3.1/radare2-5.3.1.pkg
        sudo installer -pkg *.pkg -target /
        export PATH=/usr/local/opt/llvm/bin:$PATH
        source scripts/prepare_breakpad_macos.sh
        mkdir build
        cd build
        cmake \
                -DCMAKE_BUILD_TYPE=Release \
                -DPYTHON_LIBRARY="$CUTTER_DEPS_PYTHON_PREFIX/lib/libpython3.6m.dylib" \
                -DPYTHON_INCLUDE_DIR="$CUTTER_DEPS_PYTHON_PREFIX/include/python3.6m" \
                -DPYTHON_EXECUTABLE="$CUTTER_DEPS_PYTHON_PREFIX/bin/python3" \
                -DIAITO_ENABLE_PYTHON=ON \
                -DIAITO_ENABLE_PYTHON_BINDINGS=OFF \
                -DIAITO_ENABLE_CRASH_REPORTS=ON \
                -DIAITO_USE_BUNDLED_RADARE2=ON \
                -DIAITO_ENABLE_PACKAGING=ON \
                -DIAITO_PACKAGE_DEPENDENCIES=ON \
                -DIAITO_ENABLE_DEPENDENCY_DOWNLOADS=ON \
                -DCMAKE_FRAMEWORK_PATH="$BREAKPAD_FRAMEWORK_DIR" \
                ../src && \
              make -j4;
        make package
        export IAITO_VERSION=$(python3 ../scripts/get_version.py)
        echo PACKAGE_NAME=iaito-mac.tar.gz >> $GITHUB_ENV
        cd .. && make -C dist/macos
    - uses: actions/upload-artifact@v2
      if: contains(matrix.os, 'macos')
      with:
        name: iaito-mac.pkg
        path: dist/macos/macos-pkg/*.pkg
    - name: windows dependencies
      if: contains(matrix.os, 'windows-latest')
      shell: bash
      run: |
        pip install ninja
        scripts/fetch_deps.sh
        choco install winflexbison3
    - name: w64-cmake
      if: contains(matrix.os, 'windows-latest')
      shell: cmd
      run: |
        set ARCH=x64
        set IAITO_DEPS=%CD%\cutter-deps
        set PATH=%CD%\cutter-deps\qt\bin;%CD%\r2_dist\bin;%PATH%
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
        move radare2 radare2_git
        call prepare_r2.bat
        call scripts\prepare_breakpad.bat
        cd
        mkdir build
        cd build
        set PACKAGE_NAME=iaito-w64
        cmake ^
          -DCMAKE_BUILD_TYPE=Release ^
          -DIAITO_PACKAGE_DEPENDENCIES=ON ^
          -DIAITO_ENABLE_DEPENDENCY_DOWNLOADS=ON ^
          -DIAITO_ENABLE_CRASH_REPORTS=ON ^
          -DCMAKE_PREFIX_PATH="%CUTTER_DEPS%\pyside" ^
          -DCPACK_PACKAGE_FILE_NAME=%PACKAGE_NAME% ^
          -G Ninja ^
          ../src
        cmake --build . --config Release
        cmake --build . --config Release --target package
        echo PACKAGE_NAME=%PACKAGE_NAME%.zip >> %GITHUB_ENV%
    # -DIAITO_ENABLE_PYTHON=ON ^
    # -DIAITO_ENABLE_PYTHON_BINDINGS=ON ^
    - uses: actions/upload-artifact@v2
      if: env.PACKAGE_NAME != null
      with:
        name: ${{ env.PACKAGE_NAME }}
        path: build/${{ env.PACKAGE_NAME }}
